
package view;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import model.Agendamento;
import model.Consulta;
import model.Medico;
import modelDAO.AgendamentoDAO;
import modelDAO.ConsultaDAO;
import modelDAO.MedicoDAO;
import modelDAO.PacienteDAO;

public class TelaAgendamento extends javax.swing.JFrame {

    /**
     * Creates new form TelaAgendamento
     */
    public TelaAgendamento() {
        initComponents();
        
        List<Medico> medicos = getMedicos();
        
        preencherTabelaMedicos(medicos);
        btnVoltar.addActionListener((java.awt.event.ActionEvent evt) -> {
           btnVoltarActionPerformed(evt);
        });
        
        btnMarcarConsulta.addActionListener((java.awt.event.ActionEvent evt) -> {
           btnMarcarConsultaActionPerformed(evt, medicos);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAgendamento = new javax.swing.JLabel();
        lblPaciente = new javax.swing.JLabel();
        lblCartaoSus = new javax.swing.JLabel();
        txtCartaoSus = new javax.swing.JTextField();
        lblDataConsulta = new javax.swing.JLabel();
        lblMedico = new javax.swing.JLabel();
        lblConsulta = new javax.swing.JLabel();
        btnMarcarConsulta = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMedico = new javax.swing.JTable();
        txtDataConsulta = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblAgendamento.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblAgendamento.setText("Agendamento de Consultas");

        lblPaciente.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblPaciente.setText("Paciente");

        lblCartaoSus.setText("Cartão SUS:");

        lblDataConsulta.setText("Data da consulta:");

        lblMedico.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblMedico.setText("Médico");

        lblConsulta.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblConsulta.setText("Consulta");

        btnMarcarConsulta.setText("Marcar consulta");

        btnVoltar.setText("Voltar");

        tblMedico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome do medico", "Especialidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMedico.setColumnSelectionAllowed(true);
        tblMedico.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblMedico);
        tblMedico.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblMedico.getColumnModel().getColumnCount() > 0) {
            tblMedico.getColumnModel().getColumn(0).setResizable(false);
            tblMedico.getColumnModel().getColumn(0).setPreferredWidth(1);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblConsulta)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblAgendamento)
                                        .addComponent(lblPaciente)
                                        .addComponent(lblMedico)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblCartaoSus)
                                            .addComponent(lblDataConsulta)))
                                    .addGap(151, 151, 151))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtCartaoSus, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                                        .addComponent(txtDataConsulta))
                                    .addGap(92, 92, 92))))
                        .addContainerGap(27, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(btnMarcarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnVoltar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAgendamento)
                .addGap(38, 38, 38)
                .addComponent(lblPaciente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCartaoSus)
                    .addComponent(txtCartaoSus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(lblConsulta)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataConsulta)
                    .addComponent(txtDataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(lblMedico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnMarcarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaAgendamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMarcarConsulta;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAgendamento;
    private javax.swing.JLabel lblCartaoSus;
    private javax.swing.JLabel lblConsulta;
    private javax.swing.JLabel lblDataConsulta;
    private javax.swing.JLabel lblMedico;
    private javax.swing.JLabel lblPaciente;
    private javax.swing.JTable tblMedico;
    private javax.swing.JTextField txtCartaoSus;
    private javax.swing.JTextField txtDataConsulta;
    // End of variables declaration//GEN-END:variables

    
    private void btnVoltarActionPerformed(ActionEvent evt) {
        dispose();
    }    
    
    private List<Medico> getMedicos(){
        try{
            MedicoDAO mDAO = new MedicoDAO();
            List<Medico> medicos = mDAO.listMedicos();
            return medicos;
        }catch(Exception e){
            System.out.println("Error "+e);
        }
        return null;
    }
    
    private void preencherTabelaMedicos(List<Medico> medicos){
        try{
            
            DefaultTableModel tbl = (DefaultTableModel) tblMedico.getModel();
            tbl.setNumRows(0);

            if(medicos.size() > 0){
                medicos.forEach(m -> {
                    tbl.addRow(new String[] {
                        (""+m.getId_medico()),
                        m.getNome(),
                        m.getEspecialidade()
                    });
                });
            }else if(medicos == null){
                JOptionPane.showMessageDialog(null, "Error", "Erro", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Nenhuma consulta para esse paciente", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }catch(HeadlessException e){
            System.out.println("Error "+e);
        }
    }
    
    private void limparCampos(){
        txtCartaoSus.setText("");
        txtDataConsulta.setText("");
    }
    
    private void btnMarcarConsultaActionPerformed(ActionEvent evt, List<Medico> medicos) {
                
        try{
            if(txtCartaoSus.getText().equals("") || txtDataConsulta.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite os dados corretamente!", "Info", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
            }else{
                AgendamentoDAO aDAO = new AgendamentoDAO();            
                Agendamento a = new Agendamento();

                Date dataAgendamento = new Date(); 
                SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy"); 
                String dataAgendamentoFormatada = formatador.format(dataAgendamento);
                
                
                a.setData_agendamento(dataAgendamentoFormatada);

                int idMedico = tblMedico.getSelectedRow();
                a.setId_medico(medicos.get(idMedico).getId_medico());

                PacienteDAO pDAO = new PacienteDAO();
                int id_paciente = pDAO.getIdPaciente(txtCartaoSus.getText());
                if(id_paciente == -1)
                    JOptionPane.showMessageDialog(null, "Cartao SUS INVALIDO", "Erro", JOptionPane.ERROR_MESSAGE);
                else{
                    a.setId_paciente(id_paciente);
                    
                    String txtData = txtDataConsulta.getText();
                    if(txtData.length() != 10){
                        JOptionPane.showMessageDialog(null, "Erro na data, digite corretamente!", "Erro", JOptionPane.ERROR_MESSAGE);
                        limparCampos();
                    }else{
                        a.setData_consulta(txtData);
                    
                        Consulta c = new Consulta();
                        c = aDAO.insertAgendamento(a);
                        
                        c.setId_medicoespecialista(a.getId_medico());
                        c.setId_paciente(a.getId_paciente());
                        
                        ConsultaDAO cDAO = new ConsultaDAO();
                        cDAO.insertConsulta(c);

                        limparCampos();
                        JOptionPane.showMessageDialog(null, "Consulta marcada!", "Info", JOptionPane.INFORMATION_MESSAGE);
                    }                    
                }                    
            }    
        }catch(Exception e){
            System.out.println("Error "+e);
        }
        
    }
}
